import pygame     # The package that we installed, so we can make the game.
import turtle       # Turtle is built in , it helps with drawings.
import time       # Time is for the health bar.


# Music for the game
pygame.mixer.init()

pygame.mixer.music.load(r"C:\Users\admin\Pictures\For mightest fighter game\music.mp3")
pygame.mixer.music.set_volume(0.2)  # set the volume to 20%
pygame.mixer.music.play(loops=0)    # to keep the music playing in the background
punch_sound = pygame.mixer.Sound(r"C:\Users\admin\Pictures\For mightest fighter game\punch_sound.mp3")
hadoken_ryu_sound = pygame.mixer.Sound(r"C:\Users\admin\Pictures\For mightest fighter game\hadoken_ryu_sound.mp3")
hadoken_ken_sound = pygame.mixer.Sound(r"C:\Users\admin\Pictures\For mightest fighter game\hadoken_ken_sound.mp3")
jump_sound = pygame.mixer.Sound(r"C:\Users\admin\Pictures\For mightest fighter game\jump_sound.mp3")
kick_sound = pygame.mixer.Sound(r"C:\Users\admin\Pictures\For mightest fighter game\kick_sound.mp3")

# Our screen (that contains a battle background)
screen = turtle.Screen()                    # creates/initializes the drawing area where the turtle will move and draw
screen.setup(1280, 540)           # width and height of the screen (1280x540)
screen.bgpic(r"C:\Users\admin\Pictures\For mightest fighter game\Background.gif")  # sets the background pic to beach background street fighter 2

# Players

# Player 1 (Ryu)
Ryu = (r"C:\Users\admin\Pictures\For mightest fighter game\Ryu.gif")                     # It assigns the Ryu.gif to the variable Ryu
Player1 = turtle.Turtle()            # this line creates a new turtle object and assigns it to Player1
screen.addshape(Ryu)                 # this line adds the Ryu gif as a shape to turtle screen
Player1.shape(Ryu)                   # to set the shape of a turtle object (Player 1) to the shape Ryu
print(Player1.shapesize())           # this is where it shows the image
Player1.penup()                     # this basically implifies that nothing will come after the image
Player1.speed(8000)                 # the speed of player 1
Player1.goto(400, -100)          # the placement of player 1


# Player 2 (Ken)
Ken = (r"C:\Users\admin\Pictures\For mightest fighter game\Ken.gif")                     # It assigns the Ken.gif to the variable Ken
Player2 = turtle.Turtle()           # this line creates a new turtle object and assigns it to Player2
screen.addshape(Ken)                # this line adds the Ryu gif as a shape to turtle screen
Player2.shape(Ken)                  # to set the shape of a turtle object (Player 2) to the shape Ken
print(Player2.shapesize())          # this is where it shows the image
Player2.penup()                    # this basically implifies that nothing will come after the image
Player2.speed(8000)               # the speed of player 2
Player2.goto(-400, -100)          # the placement of player 2

# Heart varibles

Health_Bar1 = 100                    # I made both a 100 because that's usually the default in games
Health_Bar2 = 100

# Health_Bar1

Health_Bar1_turtle = turtle.Turtle()
Health_Bar1_turtle.ht()
Health_Bar1_turtle.speed(0)                         # making it stay still
Health_Bar1_turtle.color("Green")                   # color of the health bar
Health_Bar1_turtle.penup()
Health_Bar1_turtle.goto(50, 220)              # placement adjustments
Health_Bar1_turtle.pendown()

# Health_Bar2

Health_Bar2_turtle = turtle.Turtle()
Health_Bar2_turtle.ht()
Health_Bar2_turtle.speed(0)                        # making it stay still
Health_Bar2_turtle.color("Green")                  # color of the health bar
Health_Bar2_turtle.penup()
Health_Bar2_turtle.goto(-50, 220)              # placement adjustments
Health_Bar2_turtle.left(180)
Health_Bar2_turtle.pendown()

# this supposed health bar is the one underneath the first 2
Bg_Health_Bar = turtle.Turtle()
Bg_Health_Bar.color("#f01717")
Bg_Health_Bar.ht()
Bg_Health_Bar.speed(9000)
Bg_Health_Bar.penup()
Bg_Health_Bar.goto(-600, 220)
Bg_Health_Bar.pendown()
Bg_Health_Bar.pensize(3)
Bg_Health_Bar.begin_fill()

for i in range(2):
    Bg_Health_Bar.forward(1200)
    Bg_Health_Bar.left(90)
    Bg_Health_Bar.forward(30)
    Bg_Health_Bar.left(90)
Bg_Health_Bar.end_fill()

# Functions for moving and heart loss

# Heart loss occurs when enemy attacks which is also the default for fighting games!!

# When Ken wins
def drawHeart1():
    # If Ryu is dead
    if Health_Bar1 <= 0:
        Win_Player2 = turtle.Turtle()
        Win_Player2.ht()
        Win_Player2.speed(9000)
        Win_Player2.penup()
        Win_Player2.goto(-200, 0)
        Win_Player2.color("#000000")   #yellow
        Win_Player2.write("Ken Wins!", font=("Courier", "70", 'normal', 'bold', 'italic'))          #the font of the text
        Health_Bar1_turtle.clear()
    else:
        Health_Bar1_turtle.clear()
        # Health_Bar1_turtle
        size = 550 * Health_Bar1 / 100
        Health_Bar1_turtle.begin_fill()
        for i in range(2):
            Health_Bar1_turtle.forward(size)
            Health_Bar1_turtle.left(90)
            Health_Bar1_turtle.forward(30)
            Health_Bar1_turtle.left(90)
        Health_Bar1_turtle.end_fill()


# When Ryu wins
def drawHeart2():
    # If Ken is dead
    if Health_Bar2 <= 0:
        Win_Player1 = turtle.Turtle()
        Win_Player1.ht()
        Win_Player1.speed(9000)
        Win_Player1.penup()
        Win_Player1.goto(-200, 0)
        Win_Player1.color("#ff0800")  #red
        Win_Player1.write("Ryu Wins!", font=("Courier", "70", 'normal', 'bold', 'italic'))        #the font of the text
        Health_Bar2_turtle.clear()
    else:
        Health_Bar2_turtle.clear()
        # Health_Bar2_turtle
        size = 550 * Health_Bar2 / 100
        Health_Bar2_turtle.begin_fill()
        for i in range(2):
            Health_Bar2_turtle.forward(size)
            Health_Bar2_turtle.right(90)
            Health_Bar2_turtle.forward(30)
            Health_Bar2_turtle.right(90)
        Health_Bar2_turtle.end_fill()


drawHeart1()
drawHeart2()

# KO Bar which means knockout in games just wanted to add it cuz it looks nicer

KO_Bar = turtle.Turtle()
KO_Bar.ht()
KO_Bar.speed(9000)
KO_Bar.penup()
KO_Bar.goto(-50, 260)
KO_Bar.pendown()
KO_Bar.begin_fill()
for i in range(2):
    KO_Bar.forward(120)
    KO_Bar.right(90)
    KO_Bar.forward(60)
    KO_Bar.right(90)
KO_Bar.end_fill()
KO_Bar.color("Orange")
KO_Bar.penup()
KO_Bar.goto(-45, 190)
KO_Bar.write("K.O", font=("Courier","50",'normal','bold'))

# The names on the side

# Ken
Ken_name = turtle.Turtle()
Ken_name.ht()
Ken_name.speed(190000)
Ken_name.penup()
Ken_name.goto(-600, 170)
Ken_name.color("#000000")     #yellow
Ken_name.write("Ken", font=("Courier", "38", 'normal', 'bold', 'italic'))

# Ryu
Ryu_name = turtle.Turtle()
Ryu_name.ht()
Ryu_name.speed(190000)
Ryu_name.penup()
Ryu_name.goto(530, 170)
Ryu_name.color("#ff0800")       #Red
Ryu_name.write("Ryu", font=("Courier", "38", 'normal', 'bold', 'italic'))


# Movement function

def leftArrow():
    Player1.backward(30)
# Going to the left for Ryu


def Space():
    global Health_Bar2
    Ryu_punch = (r"C:\Users\admin\Pictures\For mightest fighter game\Ryu_punch.gif")
    screen.addshape(Ryu_punch)
    Player1.shape(Ryu_punch)
    time.sleep(0.2)
    Ryu = (r"C:\Users\admin\Pictures\For mightest fighter game\Ryu.gif")
    Player1.shape(Ryu)
    if Player1.distance(Player2) < 240:
        Health_Bar2 -= 5
        drawHeart2()
        Player2.backward(12)
        punch_sound.play()
    time.sleep(.1)
# Ryu's punch

def rightArrow():
    Player1.forward(30)
# Going to the right for Ryu

def K():
    global Health_Bar2
    Ryu_kick = (r"C:\Users\admin\Pictures\For mightest fighter game\Ryu_kick.gif")
    screen.addshape(Ryu_kick)
    Player1.shape(Ryu_kick)
    time.sleep(0.2)
    Ryu = (r"C:\Users\admin\Pictures\For mightest fighter game\Ryu.gif")
    Player1.shape(Ryu)
    if Player1.distance(Player2) < 220:
        Health_Bar2 -= 10
        drawHeart2()
        Player2.backward(20)
        kick_sound.play()
    time.sleep(.1)
# Ryu's kick

def P():
    global Health_Bar2
    Ryu_fight = (r"C:\Users\admin\Pictures\For mightest fighter game\Ryu_fighting.gif")
    screen.addshape(Ryu_fight)
    Player1.shape(Ryu_fight)
    time.sleep(0.2)
    Ryu = (r"C:\Users\admin\Pictures\For mightest fighter game\Ryu.gif")
    Player1.shape(Ryu)
    if Player1.distance(Player2) < 250:
        Health_Bar2 -= 15
        drawHeart2()
        Player2.backward(40)
        hadoken_ryu_sound.play()
    time.sleep(.1)      # will pause time or like the execution of the program for that given time
# This is Ryu's fighting which is his hadoken


def upArrow():
    Ryu_Jump = (r"C:\Users\admin\Pictures\For mightest fighter game\Ryu_Jump.gif")
    screen.addshape(Ryu_Jump)
    Player1.shape(Ryu_Jump)
    Player1.left(90)
    Player1.forward(200)
    Player1.left(180)
    time.sleep(0.5)
    Player1.forward(200)
    Player1.right(270)
    Ryu = (r"C:\Users\admin\Pictures\For mightest fighter game\Ryu.gif")
    Player1.shape(Ryu)
    jump_sound.play()
# Ryu's jump

screen.listen()
screen.onkey(leftArrow, "Left")
screen.onkey(Space, "space")
screen.onkey(rightArrow, "Right")
screen.onkey(K, "k")
screen.onkey(P, "p")
screen.onkey(upArrow, "Up", )
# These are all the keybinds for Ryu

# Player 2

def A():
    Player2.backward(30)
# Going to the left for Ken

def D():
    Player2.forward(30)
# Going to the right for Ken

def Q():
    global Health_Bar1
    Ken_kick = (r"C:\Users\admin\Pictures\For mightest fighter game\Ken_kick.gif")
    screen.addshape(Ken_kick)
    Player2.shape(Ken_kick)
    time.sleep(0.2)
    Ken = (r"C:\Users\admin\Pictures\For mightest fighter game\Ken.gif")
    Player2.shape(Ken)
    if Player2.distance(Player1) < 235:
        Health_Bar1 -= 10
        drawHeart1()
        Player1.forward(20)
        kick_sound.play()
    time.sleep(.1)
# Ken's kick

def P2():
    global Health_Bar1
    Ken_Bam = (r"C:\Users\admin\Pictures\For mightest fighter game\Ken_punch.gif")
    screen.addshape(Ken_Bam)
    Player2.shape(Ken_Bam)
    time.sleep(0.2)
    Ken = (r"C:\Users\admin\Pictures\For mightest fighter game\Ken.gif")
    Player2.shape(Ken)
    if Player2.distance(Player1) < 235:
        Health_Bar1 -= 5
        drawHeart1()
        Player1.forward(12)
        punch_sound.play()
    time.sleep(.1)
# Ken's punch

def G():
    global Health_Bar1
    Ken_rkick = (r"C:\Users\admin\Pictures\For mightest fighter game\Ken_fighting.gif")
    screen.addshape(Ken_rkick)
    Player2.shape(Ken_rkick)
    time.sleep(0.2)
    Ken = (r"C:\Users\admin\Pictures\For mightest fighter game\Ken.gif")
    Player2.shape(Ken)
    if Player2.distance(Player1) < 250:
        Health_Bar1 -= 15
        drawHeart1()
        Player1.forward(40)
        hadoken_ken_sound.play()
    time.sleep(.1)
# Ken's Hadoken

def W():
    Ken_Jump = (r"C:\Users\admin\Pictures\For mightest fighter game\Ken_Jump.gif")
    screen.addshape(Ken_Jump)
    Player2.shape(Ken_Jump)
    Player2.left(90)
    Player2.forward(200)
    Player2.left(180)
    time.sleep(0.5)
    Player2.forward(200)
    Player2.right(270)
    Ken = (r"C:\Users\admin\Pictures\For mightest fighter game\Ken.gif")
    Player2.shape(Ken)
    jump_sound.play()
# Ken's Jump

def Esc():
    turtle.bye()
# made this so everytime I press esc it closes the game window

# This paragraph here assigns every key to its def (to its def function)
screen.listen()
screen.onkey(leftArrow, "Left")       #Moving to the left for Ryu
screen.onkey(Space, "space")         #Ryu's punch
screen.onkey(rightArrow, "Right")   #Moving to the right for Ryu
screen.onkey(K, "k")                #Ryu's Kick
screen.onkey(P, "p")                #Ryu's Hadoken
screen.onkey(upArrow, "Up", )       #Ryu's jump
screen.onkey(A, "a")                #moving to the left for Ken
screen.onkey(D, "d")                #moving to the right for Ken
screen.onkey(Q, "q")                #Ken's kick
screen.onkey(P2, "e")               #Ken's punch
screen.onkey(G, "g")                #Ken's Hadoken
screen.onkey(W, "w")                #Ken's Jump
screen.onkey(Esc, "Escape")         #To escape the game press esc



running = True
while running:
    turtle.mainloop()      # to keep the game running I used this command which keeps the loop running waiting for the user to do some action

